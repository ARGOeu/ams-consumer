#!/usr/bin/env python3

import argparse
import errno
import hashlib
import os
import signal
import sys
import time

from datetime import datetime
from argo_ams_consumer.AmsConsumerConfig import AmsConsumerConfig
from argo_ams_consumer.Logger import Logger
from argo_ams_consumer.SharedSingleton import SharedSingleton
from argo_ams_consumer.ReportThread import ReportThread
from argo_ams_consumer.AvroWriter import AvroWriter
from argo_ams_library import ArgoMessagingService, AmsException

PROG_NAME = 'argo-ams-consumer'
pid_dir = '/var/run/' + PROG_NAME + '/'
log_dir = '/var/log/' + PROG_NAME + '/'
timeout = None


def doMainProgram():
    def sigterm_handler(signum, frame):
        print('SIGTERM received')

    config = singleton.getConfig()
    log = singleton.getLog()
    ams = ArgoMessagingService(endpoint=config.getOption(AmsConsumerConfig.AMS, 'Host'),
                               token=config.getOption(AmsConsumerConfig.AMS, 'Token'),
                               project=config.getOption(AmsConsumerConfig.AMS, 'Project'))
    pull_interval = float(config.getOption(AmsConsumerConfig.AMS, 'PullIntervalSec'))
    subscriptions = config.getOption(AmsConsumerConfig.AMS, 'Subscriptions')
    msg_num = config.getOption(AmsConsumerConfig.AMS, 'PullMsgs')
    pull_nretry = config.getOption(AmsConsumerConfig.AMS, 'PullRetry')
    pull_retrysleep = config.getOption(AmsConsumerConfig.AMS, 'PullRetrySleep')

    global timeout
    timeout = config.getOption(AmsConsumerConfig.AMS, 'ConnectionTimeout')
    singleton.setLastStatTime(datetime.now())
    ackIds = []
    reportThread = ReportThread()
    reportThread.daemon = True
    reportThread.start()

    avroWriter = AvroWriter()

    while True:
        avroMsg = {}
        try:
            for id, msg in ams.pull_sub(subscriptions, msg_num,
                                        retry=pull_nretry,
                                        return_immediately=True,
                                        retrysleep=pull_retrysleep,
                                        timeout=timeout):
                ackIds.append(id)
                singleton.incrementMsgCount()
                msgDate = msg.get_attr()['partition_date']
                if msgDate not in avroMsg:
                    avroMsg[msgDate] = list()
                avroMsg[msgDate].append(msg.get_data())

            avroWriter.processMessages(avroMsg)

            if ackIds:
                ams.ack_sub(subscriptions, ackIds, retry=pull_nretry,
                            retrysleep=pull_retrysleep, timeout=timeout)
                ackIds = []

            time.sleep(pull_interval)

        except AmsException as e:
            log.error(e)
            log.error('Giving up')
            raise SystemExit(1)


def main():
    parser = argparse.ArgumentParser(prog=PROG_NAME + 'd')
    parser.add_argument('-c', dest='config', type=str, required=True, help='config file')
    args = parser.parse_args()

    ac_config = AmsConsumerConfig(args.config)
    ac_config.parse()
    log_name = ac_config.getOption(AmsConsumerConfig.GENERAL, 'LogName')

    logger = Logger(log_name, log_dir)

    global singleton
    singleton = SharedSingleton(ac_config, logger)

    try:
        doMainProgram()
    except KeyboardInterrupt:
        raise SystemExit(1)


if __name__ == "__main__":
    main()
